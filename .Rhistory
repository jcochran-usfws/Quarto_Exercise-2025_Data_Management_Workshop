sum(if_else(data$`Survey Season` == 'winter', data$Total, null))
sum(if_else(data$`Survey Season` == 'winter', data$Total, NA))
round(sum(data$``Duration (Hours)``), 2)
round(sum(data$`Duration (Hours)`), 2)
#| label: Package Install and Load
#| output: false
## Install and load packages
# Create vector of packages
requiredPackages <- c("tidyverse", "readxl", "gt", "sf", "ggrepel", "english")
# Function to install and load any packages not installed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Load packages
ipak(requiredPackages)
#| label: Data Import
#| output: false
# Read excel data from the Projects "Data" folder.
data <- read_excel("..//Data/Western_Snowy_Plover_Window_Survey_dataset.xlsx") # Read in our downloaded plover dataset.
#| label: Data Import
#| output: false
# Read excel data from the Projects "Data" folder.
data <- read_excel("../../Data/Western_Snowy_Plover_Window_Survey_dataset.xlsx") # Read in our downloaded plover dataset.
head(data) # Show the first few rows of data.
# Read shapefile data from the Projects "Data" folder.
boundary_sf <- st_read(dsn = "../../Data/us-state-boundaries")
#| label: Package Install and Load
#| output: false
## Install and load packages
# Create vector of packages
requiredPackages <- c("tidyverse", "readxl", "gt", "sf", "ggrepel", "english")
# Function to install and load any packages not installed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Load packages
ipak(requiredPackages)
#| label: Data Import
#| output: false
# Read excel data from the Projects "Data" folder.
data <- read_excel("../../Data/Western_Snowy_Plover_Window_Survey_dataset.xlsx") # Read in our downloaded plover dataset.
head(data) # Show the first few rows of data.
# Read shapefile data from the Projects "Data" folder.
boundary_sf <- st_read(dsn = "../../Data/us-state-boundaries")
round(sum(data$'Duration (Hours)'), 2)
#| label: Package Install and Load
#| output: false
## Install and load packages
# Create vector of packages
requiredPackages <- c("tidyverse", "readxl", "gt", "sf", "ggrepel", "english")
# Function to install and load any packages not installed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Load packages
ipak(requiredPackages)
combine_words(unique(data$Site))
#| label: Package Install and Load
#| output: false
## Install and load packages
# Create vector of packages
requiredPackages <- c("tidyverse", "readxl", "gt", "sf", "ggrepel", "english")
# Function to install and load any packages not installed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Load packages
ipak(requiredPackages)
#| label: Data Import
#| output: false
# Read excel data from the Projects "Data" folder.
data <- read_excel("./../../Data/Western_Snowy_Plover_Window_Survey_dataset.xlsx") # Read in our downloaded plover dataset.
head(data) # Show the first few rows of data.
# Read shapefile data from the Projects "Data" folder.
boundary_sf <- st_read(dsn = "./../../Data/us-state-boundaries")
#| label: Plover Map
#| fig-cap: "Figure 1. Map of Western Snowy Plover survey locations along the coastline."
#| output: asis
Plover_points <- data %>%
group_by(Site) %>% # Groups records by Area
summarise(Avg_Lat = mean(y, na.rm = TRUE), Avg_Lon = mean(x, na.rm = TRUE)) # Creates averages of geometry for each Area
### Converts DF into sf object
# Summary: This line of code takes the dataframe that was created above and turns it into a sf object that can be used for plotting on the map.
Plover_sf <- st_as_sf(Plover_points, coords = c("Avg_Lon", "Avg_Lat"), crs = 4326, agr = "constant") # Creates a sf object of the above DF
### Plots Sampling Map
Site_map <- ggplot() +
geom_sf(data = boundary_sf, size = .5, color = "black",fill="grey90") + # Plots the Great Lakes Polygon shapefile
geom_sf(data = Plover_sf, size = 3, shape = 21, fill = "red3", color = "red1", stroke = 1.25, alpha = .5) +
geom_sf_text(data = boundary_sf, aes(label = name)) +
geom_text_repel(data = Plover_points, aes(x = Avg_Lon, y = Avg_Lat, label = Site), size = 3.1, point.padding = .75, max.overlaps = Inf) +
coord_sf(xlim = c(-128.5, -117.2), ylim = c(46.85, 38.1), expand = FALSE) + # Zooms in on the specified area of the Great Lakes shapefile
#annotation_scale(location = "tr", style = "ticks", line_col = "black", text_col = "black") + # Applies a scale bar to the plot
theme(panel.background = element_rect(fill = "#c9e9fa"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_text(colour="black"), axis.text.y=element_text(colour="black"), axis.title.y = element_blank(), axis.title.x = element_blank(), axis.line = element_line(colour = "black"), panel.border = element_rect(colour = "black", fill=NA, size=.5)) # Gives the plot a plain standard appearance
Site_map # calls the map to be plotted
#| label: Plover Table
#| fig-cap: "Table 1. Seasonal Western Snowy Plover observational counts by survey site."
# Group by Survey Season and Site, and summarize Total Plover counts
Obs_data <- data %>%
group_by(`Survey Season`, Site) %>%
summarise(Total_Males = sum(Males),
Total_Females = sum(Females),
Total_Juveniles = sum(Juveniles),
Total_Count = sum(Total),
.groups = 'drop') %>%
arrange(Site)  # Arrange by Site
# Create a gt table
Obs_table <- Obs_data %>%
gt() %>%
cols_label(
Total_Males = "Total Males",
Total_Females = "Total Females",
Total_Juveniles = "Total Juveniles",
Total_Count = "Total Count"
)
# Print the table
Obs_table
#| label: Plover Plot
#| fig-cap: "Figure 2. Barchart showing the observations of Western Snowy Plovers per Hour by season and survey site.."
# Group by Survey Season and Site, and summarize Total Plover counts by duration (hours)
Effort_data <- data %>%
group_by(`Survey Season`, Site) %>%
summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>%
arrange(Site)  # Arrange by Site
# Create a ggplot
Effort_plot <- Effort_data %>%
ggplot(., aes(x = Site, y = Obs_Hour, fill = `Survey Season`)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
scale_fill_manual(values = c('#e5a300','#0487ee')) +
labs(x = "", y = "Plover Observations per Hour") +
theme_classic() +
theme(axis.text = element_text(color = "black", size = 10))
# Print the plot
Effort_plot
#| label: Package Install and Load
#| output: false
## Install and load packages
# Create vector of packages
requiredPackages <- c("tidyverse", "readxl", "gt", "sf", "ggrepel", "english")
# Function to install and load any packages not installed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Load packages
ipak(requiredPackages)
combine_words(unique(data$Site))
#| label: Package Install and Load
#| output: false
## Install and load packages
# Create vector of packages
requiredPackages <- c("tidyverse", "readxl", "gt", "sf", "ggrepel", "knitr")
# Function to install and load any packages not installed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Load packages
ipak(requiredPackages)
#| label: Data Import
#| output: false
# Read excel data from the Projects "Data" folder.
data <- read_excel("../../Data/Western_Snowy_Plover_Window_Survey_dataset.xlsx") # Read in our downloaded plover dataset.
head(data) # Show the first few rows of data.
# Read shapefile data from the Projects "Data" folder.
boundary_sf <- st_read(dsn = "../../Data/us-state-boundaries")
combine_words(unique(data$Site))
#| label: Package Install and Load
#| output: false
## Install and load packages
# Create vector of packages
requiredPackages <- c("tidyverse", "readxl", "gt", "sf", "ggrepel", "knitr")
# Function to install and load any packages not installed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Load packages
ipak(requiredPackages)
data <- read_excel("../../Data/Western_Snowy_Plover_Window_Survey_dataset.xlsx") %>% # Read in our downloaded plover dataset.
filter(Site == params$Site)
#| label: Package Install and Load
#| output: false
## Install and load packages
# Create vector of packages
requiredPackages <- c("tidyverse", "readxl", "gt", "sf", "ggrepel", "knitr")
# Function to install and load any packages not installed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Load packages
ipak(requiredPackages)
#| label: Data Import
#| output: false
# Read excel data from the Projects "Data" folder.
data <- read_excel("../../Data/Western_Snowy_Plover_Window_Survey_dataset.xlsx") %>% # Read in our downloaded plover dataset.
filter(Site == params$Site) # Filter dataset by survey site
#| label: Data Import
#| output: false
# Read excel data from the Projects "Data" folder.
data <- read_excel("../../Data/Western_Snowy_Plover_Window_Survey_dataset.xlsx") %>% # Read in our downloaded plover dataset.
filter(Site == params$Site) # Filter dataset by survey site
head(data) # Show the first few rows of data.
# Read shapefile data from the Projects "Data" folder.
boundary_sf <- st_read(dsn = "../../Data/us-state-boundaries")
#| label: Survey Site Map
#| fig-cap: "Figure 1. Map of Western Snowy Plover survey locations along the coastline."
#| output: asis
Plover_points <- data %>%
group_by(Site) %>% # Groups records by Area
summarise(Avg_Lat = mean(y, na.rm = TRUE), Avg_Lon = mean(x, na.rm = TRUE)) # Creates averages of geometry for each Area
### Converts DF into sf object
# Summary: This line of code takes the dataframe that was created above and turns it into a sf object that can be used for plotting on the map.
Plover_sf <- st_as_sf(Plover_points, coords = c("Avg_Lon", "Avg_Lat"), crs = 4326, agr = "constant") # Creates a sf object of the above DF
### Plots Sampling Map
Site_map <- ggplot() +
geom_sf(data = boundary_sf, size = .5, color = "black",fill="grey90") + # Plots the Great Lakes Polygon shapefile
geom_sf(data = Plover_sf, size = 3, shape = 21, fill = "red3", color = "red1", stroke = 1.25, alpha = .5) +
geom_sf_text(data = boundary_sf, aes(label = name)) +
geom_text_repel(data = Plover_points, aes(x = Avg_Lon, y = Avg_Lat, label = Site), size = 3.1, point.padding = .75, max.overlaps = Inf) +
coord_sf(xlim = c(-128.5, -117.2), ylim = c(46.85, 38.1), expand = FALSE) + # Zooms in on the specified area of the Great Lakes shapefile
#annotation_scale(location = "tr", style = "ticks", line_col = "black", text_col = "black") + # Applies a scale bar to the plot
theme(panel.background = element_rect(fill = "#c9e9fa"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_text(colour="black"), axis.text.y=element_text(colour="black"), axis.title.y = element_blank(), axis.title.x = element_blank(), axis.line = element_line(colour = "black"), panel.border = element_rect(colour = "black", fill=NA, size=.5)) # Gives the plot a plain standard appearance
Site_map # calls the map to be plotted
#| label: Plover Observation Summary Table
#| fig-cap: "Table 1. Seasonal Western Snowy Plover observational counts by survey site."
# Group by Survey Season and Site, and summarize Total Plover counts
Obs_data <- data %>%
group_by(`Survey Season`, Site) %>%
summarise(Total_Males = sum(Males),
Total_Females = sum(Females),
Total_Juveniles = sum(Juveniles),
Total_Count = sum(Total),
.groups = 'drop') %>%
arrange(Site)  # Arrange by Site
# Create a gt table
Obs_table <- Obs_data %>%
gt() %>%
cols_label(
Total_Males = "Total Males",
Total_Females = "Total Females",
Total_Juveniles = "Total Juveniles",
Total_Count = "Total Count"
)
# Print the table
Obs_table
#| label: Plover Observation per Hour Plot
#| fig-cap: "Figure 2. Text."
# Group by Survey Season and Site, and summarize Total Plover counts by duration (hours)
Effort_data <- data %>%
group_by(`Survey Season`, Site) %>%
summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>%
arrange(Site)  # Arrange by Site
# Create a ggplot
Effort_plot <- Effort_data %>%
ggplot(., aes(x = Site, y = Obs_Hour, fill = `Survey Season`)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
scale_fill_manual(values = c('#e5a300','#0487ee')) +
labs(x = "", y = "Plover Observations per Hour") +
theme_classic() +
theme(axis.text = element_text(color = "black", size = 10))
# Print the plot
Effort_plot
View(data)
filter('Survey Season' == "summer") %>% sum(Total)
data %>% filter('Survey Season' == "summer") %>% sum(Total)
test <- data %>% filter('Survey Season' == "summer") %>% sum(Total)
test <- data %>% filter('Survey Season' == "summer")
test <- data %>% filter(`Survey Season` == "summer") %>% sum(Total)
test <- data %>% filter(`Survey Season`` == "summer")
View(test)
test <- data %>% filter(`Survey Season` == "summer")
test <- data %>% filter(`Survey Season` == "summer")
data %>% filter(`Survey Season` == "summer") %>% sum(Total)`
ada
ad
data %>% filter(`Survey Season` == "summer") %>% sum(Total)
data %>% filter(`Survey Season` == "summer") %>% sum(Total)
data %>% filter(`Survey Season` == "summer") %>% sum(Total)
View(test)
data %>% filter(`Survey Season` == "summer") %>% nrow()
data %>% filter(`Survey Season` == "summer") %>% sum(Total)
data %>% filter(`Survey Season` == "summer") %>% sum(data$Total)
data %>% filter(`Survey Season` == "summer") %>% sum(8)
data %>% filter(`Survey Season` == "summer") %>% sum(Total, na.rm = TRUE)
data %>% filter(`Survey Season` == "summer")
data %>% filter(`Survey Season` == "summer") %>% sum(., Total)
sum(data$Total)
sum(if_else(`Survey Season` == "summer", Total, NULL))
sum(if_else(data$`Survey Season` == "summer", Total, NULL))
sum(if_else(data$`Survey Season` == "summer", data$Total, NULL))
sum(if_else(data$`Survey Season` == "summer", data$Total, 0))
sum(if_else(data$`Survey Season` == "summer", data$Total, null))
sum(if_else(data$`Survey Season` == "summer", data$Total, "null"))
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total))
test<
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% pull(1)
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% pull(1)
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% extract(1)
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total))
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% extract(1$1)
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% filter(row_number()==1)
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% filter(row_number()==1) %>% extract(`Survey Season`)
params$Site`, the `r data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% filter(row_number()==1) %>% extract(1)
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% filter(row_number()==1) %>% extract(1)
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% filter(row_number()==1) %>% select(1) %>%  extract(1)
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total))
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% filter(row_number()==1) %>% select(1) %>%  extract(`Survey Season`)
#| label: Package Install and Load
#| output: false
## Install and load packages
# Create vector of packages
requiredPackages <- c("tidyverse", "readxl", "gt", "sf", "ggrepel", "knitr", "magrittr")
# Function to install and load any packages not installed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Load packages
ipak(requiredPackages)
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% filter(row_number()==1) %>%  extract2(`Survey Season`)
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% filter(row_number()==1)
data %>% group_by(`Survey Season`) %>% summarise(n = sum(Total)) %>% filter(row_number()==1) %>%  extract2(1)
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2))
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>% filter(row_number()==1)
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>% filter(row_number()==1)
test <- data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>% filter(row_number()==1)
View(test)
View(test)
View(test)
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>% filter(row_number()==1)
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>% filter(`Survey Season` == "summer")
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>% filter(`Survey Season` == "summer") %>% extract2(Obs_Hour)
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>% filter(`Survey Season` == "summer") %>% extract2(3)
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2))
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>% filter(`Survey Season` == "winter") %>% extract2(1)
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>% filter(`Survey Season` == "winter") %>% extract2(2)
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>%  extract(1)
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>% filter(row_number()==1) %>%  extract(1)
data %>% group_by(`Survey Season`, Site) %>% summarise(Obs_Hour = round(sum(Total)/sum(`Duration (Hours)`), 2)) %>% filter(row_number()==1)
View(Effort_data)
View(Obs_data)
Obs_data %>% filter(``Survey Season`` == "summer") %>% extract2(6)
Obs_data %>% filter(``Survey Season`` == "summer") %>% extract2(Total_Count)
Obs_data %>% filter(``Survey Season`` == "summer")
Obs_data %>% filter(`Survey Season` == "summer") %>% extract2(Total_Count)
Obs_data %>% filter("Survey Season" == "summer")
test <- Obs_data %>% filter("Survey Season" == "summer")
test <- Obs_data %>% filter(`Survey Season` == "summer")
filter(Obs_data$"Survey Season" == "summer") %>% extract2(Total_Count)
test <- filter(Obs_data$"Survey Season" == "summer")
#| label: Package Install and Load
#| output: false
## Install and load packages
# Create vector of packages
requiredPackages <- c("tidyverse", "readxl", "gt", "sf", "ggrepel", "knitr", "magrittr")
# Function to install and load any packages not installed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Load packages
ipak(requiredPackages)
#| label: Data Import
#| output: false
# Read excel data from the Projects "Data" folder.
data <- read_excel("../../Data/Western_Snowy_Plover_Window_Survey_dataset.xlsx") %>% # Read in our downloaded plover dataset.
filter(Site == params$Site) # Filter dataset by survey site
head(data) # Show the first few rows of data.
# Read shapefile data from the Projects "Data" folder.
boundary_sf <- st_read(dsn = "../../Data/us-state-boundaries")
#| label: Survey Site Map
#| fig-cap: "Figure 1. Map of Western Snowy Plover survey locations along the coastline."
#| output: asis
Plover_points <- data %>%
group_by(Site) %>% # Groups records by Area
summarise(Avg_Lat = mean(y, na.rm = TRUE), Avg_Lon = mean(x, na.rm = TRUE)) # Creates averages of geometry for each Area
### Converts DF into sf object
# Summary: This line of code takes the dataframe that was created above and turns it into a sf object that can be used for plotting on the map.
Plover_sf <- st_as_sf(Plover_points, coords = c("Avg_Lon", "Avg_Lat"), crs = 4326, agr = "constant") # Creates a sf object of the above DF
### Plots Sampling Map
Site_map <- ggplot() +
geom_sf(data = boundary_sf, size = .5, color = "black",fill="grey90") + # Plots the Great Lakes Polygon shapefile
geom_sf(data = Plover_sf, size = 3, shape = 21, fill = "red3", color = "red1", stroke = 1.25, alpha = .5) +
geom_sf_text(data = boundary_sf, aes(label = name)) +
geom_text_repel(data = Plover_points, aes(x = Avg_Lon, y = Avg_Lat, label = Site), size = 3.1, point.padding = .75, max.overlaps = Inf) +
coord_sf(xlim = c(-128.5, -117.2), ylim = c(46.85, 38.1), expand = FALSE) + # Zooms in on the specified area of the Great Lakes shapefile
#annotation_scale(location = "tr", style = "ticks", line_col = "black", text_col = "black") + # Applies a scale bar to the plot
theme(panel.background = element_rect(fill = "#c9e9fa"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x=element_text(colour="black"), axis.text.y=element_text(colour="black"), axis.title.y = element_blank(), axis.title.x = element_blank(), axis.line = element_line(colour = "black"), panel.border = element_rect(colour = "black", fill=NA, size=.5)) # Gives the plot a plain standard appearance
Site_map # calls the map to be plotted
#| label: Figure Data Manipulation
## Plover Counts Summary
# Group by Survey Season and Site, and summarize Total Plover counts
Obs_data <- data %>%
group_by(Survey_Season, Site) %>%
summarise(Total_Males = sum(Males),
Total_Females = sum(Females),
Total_Juveniles = sum(Juveniles),
Total_Count = sum(Total),
.groups = 'drop') %>%
arrange(Site)  # Arrange by Site
## Plover Observations per Hour
# Group by Survey Season and Site, and summarize Total Plover counts by duration (hours)
Effort_data <- data %>%
group_by(Survey_Season, Site) %>%
summarise(Obs_Hour = round(sum(Total)/sum(Duration_Hours), 2)) %>%
arrange(Site)  # Arrange by Site
Obs_data %>% filter(Survey_Season == "summer") %>% extract2(Total_Count)
Obs_data %>% filter(Survey_Season == "summer") %>% extract2(6)
Obs_data %>% filter(Survey_Season == "winter") %>% extract2(6)
Effort_data %>% filter(Survey_Season == "summer") %>% extract2(3)
View(Effort_data)
Effort_data %>% filter(row_number()==1) %>% extract2(1)
test <- Effort_data %>% filter(row_number()==1)
View(test)
test <- Effort_data %>% filter(value == max(Obs_Hour))
test <- Effort_data %>% filter(Obs_Hour == max(Obs_Hour))
View(test)
test <- Effort_data %>% fslice(which.max(Obs_Hour))
test <- Effort_data %>% slice(which.max(Obs_Hour))
View(test)
test <- Effort_data %>% top_n(n=1)
test <- Effort_data %>% top_n(n=1)
View(test)
test <- Effort_data %>% slice(1)
View(test)
test <- Effort_data %>% ungroup() %>% slice(1)
test <- Effort_data %>% ungroup() %>% slice(which.max(Obs_Hour))
View(test)
Effort_data %>% ungroup() %>% slice(which.max(Obs_Hour)) %>% extract2(1)
#| label: Figure Data Manipulation
## Plover Counts Summary
# Group by Survey Season and Site, and summarize Total Plover counts
Obs_data <- data %>%
group_by(Survey_Season, Site) %>%
summarise(Total_Males = sum(Males),
Total_Females = sum(Females),
Total_Juveniles = sum(Juveniles),
Total_Count = sum(Total),
.groups = 'drop') %>%
arrange(Site)  # Arrange by Site
## Plover Observations per Hour
# Group by Survey Season and Site, and summarize Total Plover counts by duration (hours)
Effort_data <- data %>%
group_by(Survey_Season, Site) %>%
summarise(Obs_Hour = round(sum(Total)/sum(Duration_Hours), 2)) %>%
arrange(Site)  # Arrange by Site
#| label: Plover Observation Summary Table
#| fig-cap: "Table 1. Seasonal Western Snowy Plover observational counts by survey site."
# Create a gt table
Obs_table <- Obs_data %>%
gt() %>%
cols_label(
Survey_Season = "Survey Season",
Total_Males = "Total Males",
Total_Females = "Total Females",
Total_Juveniles = "Total Juveniles",
Total_Count = "Total Count"
)
# Print the table
Obs_table
#| label: Plover Observation per Hour Plot
#| fig-cap: "Figure 2. Text."
# Create a ggplot
Effort_plot <- Effort_data %>%
ggplot(., aes(x = Site, y = Obs_Hour, fill = `Survey Season`)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
scale_fill_manual(values = c('#e5a300','#0487ee')) +
labs(x = "", y = "Plover Observations per Hour") +
theme_classic() +
theme(axis.text = element_text(color = "black", size = 10))
# Print the plot
Effort_plot
#| label: Plover Observation per Hour Plot
#| fig-cap: "Figure 2. Text."
# Create a ggplot
Effort_plot <- Effort_data %>%
ggplot(., aes(x = Site, y = Obs_Hour, fill = Survey_Season)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
scale_fill_manual(values = c('#e5a300','#0487ee')) +
labs(x = "", y = "Plover Observations per Hour") +
theme_classic() +
theme(axis.text = element_text(color = "black", size = 10))
# Print the plot
Effort_plot
paste0("Figure 1. Map of Western Snowy Plover survey locations at the ", params$Site, " survey location.")
paste0("Figure 2. paste0("Figure 2. Seasonal Western Snowy Plover observation rates (per hour) at the ", params$Site, " survey location.")
paste0("Figure 2. Seasonal Western Snowy Plover observation rates (per hour) at the ", params$Site, " survey location.")
